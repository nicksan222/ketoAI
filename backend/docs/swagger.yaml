basePath: /
definitions:
  ingredients.Ingredient:
    properties:
      approved:
        description: Users can insert custom ingredients, but must be approved first
          by admins
        type: boolean
      carbs:
        type: number
      fat:
        type: number
      id:
        type: string
      is_main_ingredient:
        description: Main ingredients are used in the calculation of the macros of
          a recipe
        type: boolean
      name:
        type: string
      protein:
        type: number
      quantity_measurement:
        type: string
    type: object
  ingredients_get.GetIngredientResponse:
    properties:
      ingredient:
        $ref: '#/definitions/ingredients.Ingredient'
    type: object
  ingredients_getpreferences.GetIngredientPreferencesResponse:
    properties:
      ingredients:
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
  ingredients_list.ListIngredientsResponse:
    properties:
      ingredients:
        items:
          $ref: '#/definitions/ingredients.Ingredient'
        type: array
    type: object
  ingredients_setpreferences.SetIngredientPreferencesRequest:
    properties:
      ingredient_ids:
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
  ingredients_setpreferences.SetIngredientPreferencesResponse:
    properties:
      ingredient_ids:
        items:
          type: string
        type: array
    type: object
host: http://backend:4000
info:
  contact:
    email: nicksan222@icloud.com
    name: API Support
  description: This is the KetoAI API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: KetoAI API
  version: "1.0"
paths:
  /ingredients:
    get:
      consumes:
      - application/json
      description: Retrieves a list of ingredients based on beginning and ending characters
        and a limit on the number of results.
      parameters:
      - description: Filter ingredients that begin with these characters
        in: query
        name: begins_with
        type: string
      - description: Filter ingredients that end with these characters
        in: query
        name: ends_with
        type: string
      - description: Limit the number of ingredients returned
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of ingredients returned successfully.
          schema:
            items:
              $ref: '#/definitions/ingredients_list.ListIngredientsResponse'
            type: array
        "400":
          description: Bad Request - Invalid query parameters.
          schema:
            type: object
        "404":
          description: Not Found - Ingredients not found.
          schema:
            type: object
      summary: List ingredients
      tags:
      - ingredients
  /ingredients/{ingredient_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the ingredient by its ID.
      parameters:
      - description: Ingredient ID
        in: path
        name: ingredient_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ingredient found and returned successfully.
          schema:
            $ref: '#/definitions/ingredients_get.GetIngredientResponse'
        "400":
          description: Bad Request - Missing ingredient ID.
          schema:
            type: object
        "404":
          description: Not Found - Ingredient not found.
          schema:
            type: object
      summary: Retrieve a single ingredient
      tags:
      - ingredients
  /ingredients/preferences:
    get:
      consumes:
      - application/json
      description: Retrieves the list of ingredient preferences for a user based on
        their ID.
      produces:
      - application/json
      responses:
        "200":
          description: List of ingredient preferences returned successfully.
          schema:
            items:
              $ref: '#/definitions/ingredients_getpreferences.GetIngredientPreferencesResponse'
            type: array
        "401":
          description: Unauthorized - User ID not found.
          schema:
            type: object
        "404":
          description: Not Found - Ingredient preferences not found.
          schema:
            type: object
      summary: Retrieve a user's ingredient preferences
      tags:
      - ingredients
    post:
      consumes:
      - application/json
      description: Sets or updates the ingredient preferences for a user based on
        their ID.
      parameters:
      - description: Ingredient Preferences Request
        in: body
        name: preference
        required: true
        schema:
          $ref: '#/definitions/ingredients_setpreferences.SetIngredientPreferencesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Ingredient preferences set or updated successfully.
          schema:
            $ref: '#/definitions/ingredients_setpreferences.SetIngredientPreferencesResponse'
        "400":
          description: Bad Request - Invalid request body or parameters.
          schema:
            type: object
        "401":
          description: Unauthorized - User ID not found.
          schema:
            type: object
        "404":
          description: Not Found - Unable to set or update preferences.
          schema:
            type: object
      summary: Set a user's ingredient preferences
      tags:
      - ingredients
  /ingredients/preferences/{ingredient_id}:
    delete:
      consumes:
      - application/json
      description: Deletes the preference of a specific ingredient for a user based
        on their ID and the ingredient ID.
      parameters:
      - description: Ingredient ID
        in: path
        name: ingredient_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Ingredient preference deleted successfully.
          schema:
            type: object
        "400":
          description: Bad Request - Missing ingredient ID.
          schema:
            type: object
        "401":
          description: Unauthorized - User ID not found.
          schema:
            type: object
        "404":
          description: Not Found - Ingredient or preference not found.
          schema:
            type: object
      summary: Delete a user's ingredient preference
      tags:
      - ingredients
  /recipes/{recipe_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a recipe for a user based on their ID and the recipe ID.
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Recipe deleted successfully.
          schema:
            type: object
        "400":
          description: Bad Request - Missing recipe ID.
          schema:
            type: object
        "401":
          description: Unauthorized - User ID not found.
          schema:
            type: object
        "404":
          description: Not Found - Recipe or user not found.
          schema:
            type: object
      summary: Delete a user's recipe
      tags:
      - recipes
    get:
      consumes:
      - application/json
      description: Retrieves the details of a specific recipe for a user based on
        their ID and the recipe ID.
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Recipe retrieved successfully.
          schema:
            type: object
        "400":
          description: Bad Request - Missing recipe ID.
          schema:
            type: object
        "401":
          description: Unauthorized - User ID not found.
          schema:
            type: object
        "404":
          description: Not Found - Recipe or user not found.
          schema:
            type: object
      summary: Get a specific recipe
      tags:
      - recipes
swagger: "2.0"
